type Query {
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]!
  viewer: User
  threads(after: String, before: String, first: Int, last: Int): QueryThreadsConnection!
}

type Mutation {
  userChangeAvatarSeed(input: UserChangeAvatarSeedInput!): UserChangeAvatarSeedPayload!
  userChangeUsername(input: UserChangeUsernameInput!): UserChangeUsernamePayload!
  messageCreate(input: messageInput!): Message!
  threadCreate(input: threadInput!): Thread!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

interface Node {
  id: ID!
}

type User implements Node {
  avatarUrl: String!
  createdAt: DateTime
  id: ID!
  username: String
}

input UserChangeAvatarSeedInput {
  avatarSeed: String!
}

type UserChangeAvatarSeedPayload {
  viewer: User!
}

input UserChangeUsernameInput {
  username: String!
}

type UserChangeUsernamePayload {
  viewer: User!
}

type Message implements Node {
  content: String
  createdAt: DateTime
  createdUser: User
  id: ID!
  thread: Thread
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type QueryThreadsConnection {
  edges: [QueryThreadsConnectionEdge]!
  pageInfo: PageInfo!
}

type QueryThreadsConnectionEdge {
  cursor: String!
  node: Thread!
}

type Thread implements Node {
  createdAt: DateTime
  createdUser: User
  id: ID!
  messages(after: String, before: String, first: Int, last: Int): ThreadMessagesConnection
  name: String
}

type ThreadMessagesConnection {
  edges: [ThreadMessagesConnectionEdge]!
  pageInfo: PageInfo!
}

type ThreadMessagesConnectionEdge {
  cursor: String!
  node: Message!
}

input messageInput {
  content: String!
  threadId: ID!
}

input threadInput {
  name: String!
}

type Subscription {
  threadMessageUpdates(threadId: ID!): Message!
}